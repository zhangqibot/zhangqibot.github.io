[{"categories":["Course Notes"],"content":"Course Notes of ChatGPT Prompt Engineering for Developers","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/"},{"categories":["Course Notes"],"content":"Course Notes of ChatGPT Prompt Engineering for Developers. ChatGPT Prompt Engineering for Developers By Andrew Ng+Isa Fulford (OpenAI) Original link to the course: ChatGPT Prompt Engineering for Developers Base LLM Instruction Tuned LLM Most applications are based on Instruction Tuned LLM. Setup import openai import os os.environ['OPENAI_API_KEY'] = \"sk-\" # set your openai api key openai.api_key = os.environ.get(\"OPENAI_API_KEY\") # openai.api_base=\"\" # DEMO res = openai.ChatCompletion.create( model=\"gpt-3.5-turbo\", messages=[ {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"}, {\"role\": \"assistant\", \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\"}, {\"role\": \"user\", \"content\": \"Where was it played?\"} ] ) res.choices[0]['message'] def get_completion(prompt, model=\"gpt-3.5-turbo\"): messages = [{\"role\": \"user\", \"content\": prompt}] response = openai.ChatCompletion.create( model=model, messages=messages, temperature=0, # this is the degree of randomness of the model's output ) return response.choices[0].message[\"content\"] prompt=\"\"\"XXX\"\"\" response = get_completion(prompt) print(response) ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:0:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#"},{"categories":["Course Notes"],"content":" Guidelines for Prompting","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:0:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#guidelines-for-prompting"},{"categories":["Course Notes"],"content":" Prompting Principle 1: Write clear and specific instructions","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:1:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#prompting-principle-1-write-clear-and-specific-instructions"},{"categories":["Course Notes"],"content":" Tactic 1: Use delimiters to clearly indicate distinct parts of the input Delimiters can be anything like: `````, \"\"\", \u003c \u003e, \u003ctag\u003e \u003c/tag\u003e, : text = f\"\"\"xxx\"\"\" prompt = f\"\"\" Summarize the text delimited by triple backticks \\ into a single sentence. ​```{text}``` \"\"\" ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:1:1","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#tactic-1-use-delimiters-to-clearly-indicate-distinct-parts-of-the-input"},{"categories":["Course Notes"],"content":" Tactic 2: Ask for a structured output JSON, HTML prompt = f\"\"\" Generate a list of three made-up book titles along \\ with their authors and genres. Provide them in JSON format with the following keys: book_id, title, author, genre. \"\"\" ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:1:2","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#tactic-2-ask-for-a-structured-output"},{"categories":["Course Notes"],"content":" Tactic 3: Ask the model to check whether conditions are satisfied prompt = f\"\"\" You will be provided with text delimited by triple quotes. If it contains a sequence of instructions, \\ re-write those instructions in the following format: Step 1 - ... Step 2 - … … Step N - … If the text does not contain a sequence of instructions, \\ then simply write \\\"No steps provided.\\\" \\\"\\\"\\\"{text_1}\\\"\\\"\\\" \"\"\" ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:1:3","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#tactic-3-ask-the-model-to-check-whether-conditions-are-satisfied"},{"categories":["Course Notes"],"content":" Tactic 4: “Few-shot” prompting prompt = f\"\"\" Your task is to answer in a consistent style. \u003cchild\u003e: Teach me about patience. \u003cgrandparent\u003e: The river that carves the deepest \\ valley flows from a modest spring; the \\ grandest symphony originates from a single note; \\ the most intricate tapestry begins with a solitary thread. \u003cchild\u003e: Teach me about resilience. \"\"\" ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:1:4","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#tactic-4-few-shot-prompting"},{"categories":["Course Notes"],"content":" Prompting Principle 2: Give the model time to “think”","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:2:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#prompting-principle-2-give-the-model-time-to-think"},{"categories":["Course Notes"],"content":" Tactic 1: Specify the steps required to complete a task prompt_1 = f\"\"\" Perform the following actions: 1 - Summarize the following text delimited by triple \\ backticks with 1 sentence. 2 - Translate the summary into French. 3 - List each name in the French summary. 4 - Output a json object that contains the following \\ keys: french_summary, num_names. Separate your answers with line breaks. Text: ​```{text}``` \"\"\" Ask for output in a specified format prompt_2 = f\"\"\" Your task is to perform the following actions: 1 - Summarize the following text delimited by \u003c\u003e with 1 sentence. 2 - Translate the summary into French. 3 - List each name in the French summary. 4 - Output a json object that contains the following keys: french_summary, num_names. Use the following format: Text: \u003ctext to summarize\u003e Summary: \u003csummary\u003e Translation: \u003csummary translation\u003e Names: \u003clist of names in Italian summary\u003e Output JSON: \u003cjson with summary and num_names\u003e Text: \u003c{text}\u003e \"\"\" ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:2:1","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#tactic-1-specify-the-steps-required-to-complete-a-task"},{"categories":["Course Notes"],"content":" Tactic 2: Instruct the model to work out its own solution before rushing to a conclusion Question=\"\"\"XXX\"\"\" Solution=\"\"\"XXX\"\"\" prompt = f\"\"\" Your task is to determine if the student's solution \\ is correct or not. To solve the problem do the following: - First, work out your own solution to the problem. - Then compare your solution to the student's solution \\ and evaluate if the student's solution is correct or not. Don't decide if the student's solution is correct until you have done the problem yourself. Use the following format: Question: question here Student's solution: student’s solution here Actual solution: steps to work out the solution and your solution here Is the student's solution the same as actual solution \\ just calculated: yes or no Student grade: correct or incorrect Question: {Question} Student's solution: {Solution} Actual solution: \"\"\" ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:2:2","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#tactic-2-instruct-the-model-to-work-out-its-own-solution-before-rushing-to-a-conclusion"},{"categories":["Course Notes"],"content":" Model Limitations: HallucinationsHallucination makes statements that sound plausible but are not true Reducing hallucinations: First find relevant information, then answer the question based on the relevant information. prompt = f\"\"\" Tell me about AeroGlide UltraSlim Smart Toothbrush by Boie \"\"\" response = get_completion(prompt) # Boie is a real company, the product name is not real. ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:3:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#model-limitations-hallucinations"},{"categories":["Course Notes"],"content":" Iterative Prompt Development The Prompt workflow involves step-by-step development, similar to model training and tuning. However, success in writing prompts usually requires multiple iterations, as depicted in the figure above. It’s important to note that there is no one-size-fits-all perfect prompt. The key to becoming a skilled prompt engineer is having a good development and iterative process for creating prompts. ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:0:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#iterative-prompt-development"},{"categories":["Course Notes"],"content":" Issue 1: The text is too longLimit the number of words/sentences/characters. Use at most 50 words. Use at most 3 sentences. Use at most 280 characters. (This could be more precise because of the tokenization.) ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:1:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#issue-1-the-text-is-too-long"},{"categories":["Course Notes"],"content":" Issue 2. Text focuses on the wrong detailsAsk it to focus on the aspects that are relevant to the intended audience. For example, The description is intended for furnit, so should be technical in nature and focus on the materials the product is constructed from. ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:2:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#issue-2-text-focuses-on-the-wrong-details"},{"categories":["Course Notes"],"content":" Issue 3. Description needs a table of dimensionsAsk it to extract information and organize it in a table. For example, After the description, include a table that gives the product's dimensions. The table should have two columns. In the first column include the name of the dimension. In the second column include the measurements in inches only. Give the table the title 'Product Dimensions'. Format everything as HTML that can be used in a website. Place the description in a \u003cdiv\u003e element. ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:3:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#issue-3-description-needs-a-table-of-dimensions"},{"categories":["Course Notes"],"content":" Summarizing prod_review=\"\"\"xxx\"\"\" prompt = f\"\"\" Your task is to generate a short summary of a product \\ review from an ecommerce site to give feedback to the \\ pricing deparmtment, responsible for determining the \\ price of the product. Summarize the review below, delimited by triple \\ backticks, in at most 30 words, and focusing on any aspects \\ that are relevant to the price and perceived value. Review: ```{prod_review}``` \"\"\" response = get_completion(prompt) And try “extract” instead of “summarize”: If we only want to extract information from a specific aspect, we can request the model to perform “text extraction” instead of “text summarization”. ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:0:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#summarizing"},{"categories":["Course Notes"],"content":" InferringIdentify types of emotions, Extract useful information, Inferring topics, etc. prompt = f\"\"\" Identify the following items from the review text: - Sentiment (positive or negative) - Is the reviewer expressing anger? (true or false) - Item purchased by reviewer - Company that made the item The review is delimited with triple backticks. \\ Format your response as a JSON object with \\ \"Sentiment\", \"Anger\", \"Item\" and \"Brand\" as the keys. If the information isn't present, use \"unknown\" \\ as the value. Make your response as short as possible. Format the Anger value as a boolean. Review text: ```{lamp_review}``` \"\"\" response = get_completion(prompt) Infer 5 topics: prompt = f\"\"\" Determine five topics that are being discussed in the \\ following text, which is delimited by triple backticks. Make each item one or two words long. Format your response as a list of items separated by commas. Text sample: ```{story}``` \"\"\" response = get_completion(prompt) ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:0:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#inferring"},{"categories":["Course Notes"],"content":" TransformingUniversal Translator, Tone Transformation, Format Conversion, Spellcheck/Grammar check, etc. Tone Transformation: prompt = f\"\"\" Translate the following from slang to a business letter: 'Dude, This is Joe, check out this spec on this standing lamp.' \"\"\" response = get_completion(prompt) Format Conversion: data_json = { \"resturant employees\" :[ {\"name\":\"Shyam\", \"email\":\"shyamjaiswal@gmail.com\"}, {\"name\":\"Bob\", \"email\":\"bob32@gmail.com\"}, {\"name\":\"Jai\", \"email\":\"jai87@gmail.com\"} ]} prompt = f\"\"\" Translate the following python dictionary from JSON to an HTML \\ table with column headers and title: {data_json} \"\"\" response = get_completion(prompt) ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:0:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#transforming"},{"categories":["Course Notes"],"content":" ExpandingCustomize the automated reply to a customer email sentiment = \"negative\" review = f\"\"\"xxx\"\"\" prompt = f\"\"\" You are a customer service AI assistant. Your task is to send an email reply to a valued customer. Given the customer email delimited by ```, \\ Generate a reply to thank the customer for their review. If the sentiment is positive or neutral, thank them for \\ their review. If the sentiment is negative, apologize and suggest that \\ they can reach out to customer service. Make sure to use specific details from the review. Write in a concise and professional tone. Sign the email as `AI customer agent`. Customer review: ```{review}``` Review sentiment: {sentiment} \"\"\" response = get_completion(prompt) Remind the model to use details from the customer’s email sentiment = \"negative\" review = f\"\"\"xxx\"\"\" prompt = f\"\"\" You are a customer service AI assistant. Your task is to send an email reply to a valued customer. Given the customer email delimited by ```, \\ Generate a reply to thank the customer for their review. If the sentiment is positive or neutral, thank them for \\ their review. If the sentiment is negative, apologize and suggest that \\ they can reach out to customer service. Make sure to use specific details from the review. Write in a concise and professional tone. Sign the email as `AI customer agent`. Customer review: ```{review}``` Review sentiment: {sentiment} \"\"\" response = get_completion(prompt, temperature=0.7) # 0, choose most likely, 1, randomness+exploration The Temperature parameter affects model diversity by controlling its exploratory and random nature. Lower temperature values (approaching 0) result in stronger determinism while higher temperature values (approaching 1) lead to stronger randomness. For a stable and reliable system, it is recommended to set the temperature to 0 in a production environment. However, if you seek more creative results, you can set the temperature high. ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:0:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#expanding"},{"categories":["Course Notes"],"content":" Chatbot Dialogues with users (single or multi-character). System messages: set the assistant’s character and behavior, serve as higher-level commands, and are not perceived by the user. Remembering previous conversations: Developers must provide all relevant information for the current conversation. If the model is expected to remember information from previous conversations, the previous dialogue must be input into the model’s context. ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:0:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#chatbot"},{"categories":["Course Notes"],"content":" Conclusion Two principles: Write clear and specific instructions Give the model time to think. Iterative prompt development The capabilities: Summarizing, Inferring, Transforming, Expanding Building a chatbot ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:0:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#conclusion"},{"categories":["Course Notes"],"content":" ReferenceChatGPT Prompt Engineering for Developers ","date":"2023-05-17","objectID":"/chatgpt-prompt-engineering-for-developers/:0:0","series":null,"tags":["ChatGPT","LLM","Prompt Engineering"],"title":"ChatGPT Prompt Engineering for Developers","uri":"/chatgpt-prompt-engineering-for-developers/#reference"},{"categories":null,"content":"Hi, I am Botter Zhang. I am currently employed as a Deep Learning Engineer, specializing in Recommendation Systems and Information Retrieval. Lately, my interests have expanded into the field of Artificial General Intelligence (AGI). I am currently affiliated with the NetEase Games team in Guangzhou. Prior to this position, I worked at jd.com in Beijing for about two years. I earned my Master’s degree in Meteorology from the University of Chinese Academy of Sciences and the Chinese Academy of Meteorological Sciences through joint training. During my postgraduate journey, my research primarily revolved around Arctic sea ice and its correlation with climate change. I acquired the skill to utilize AI algorithms for modeling and predicting changes in Arctic sea ice. Additionally, I was fortunate to participate in two scientific expeditions to the Arctic: one to Barrow, Alaska, and another to Greenland. However, my career trajectory took a fascinating turn, leading me into the captivating world of AI technology instead of meteorology. I have had the honor of winning distinguished competitions such as the WSDM CUP 2022 and KDD CUP 2022. These competitions attract the brightest minds in the field, and I learned a lot from competing alongside them. Additionally, I secured the runner-up position in the WSDM 2023 CUP, and was given the opportunity to deliver an oral presentation at the WSDM 2023 CUP in Singapore. But my life isn’t solely about codes and algorithms. My passion for landscape photography once led me to the privilege of signing contracts with Getty Images and VCG as a professional photographer. Although my photography pursuits have somewhat lessened now. In addition, I have a wide range of hobbies, such as playing tennis, playing soccer, playing the guitar, and playing Texas hold ’em poker with friends. I appreciate your time in getting to know a bit about me and I’m looking forward to engaging in insightful discussions and collaborations with you. ","date":"2023-05-01","objectID":"/about/:0:0","series":null,"tags":null,"title":"About Me","uri":"/about/#"}]